ES6 (ECMAScript 2015) introduced many new features and syntax improvements to JavaScript. Here's a summary of the key concepts and syntax changes in ES6:

1. Let and Const
let: Block-scoped variable, unlike var, which is function-scoped.
javascript
Copy code
let x = 10;
if (true) {
  let x = 20; // Different variable than the outer x
}
console.log(x); // 10
const: Block-scoped constant, which cannot be reassigned.
javascript
Copy code
const y = 5;
y = 10; // Error: Assignment to constant variable.
2. Arrow Functions
Concise syntax for writing functions. Arrow functions do not have their own this context.
javascript
Copy code
const add = (a, b) => a + b;
console.log(add(2, 3)); // 5
3. Template Literals
Multi-line strings and string interpolation using backticks.
javascript
Copy code
const name = 'John';
console.log(`Hello, ${name}!`); // Hello, John!
4. Default Parameters
Default values for function parameters.
javascript
Copy code
function greet(name = 'Guest') {
  return `Hello, ${name}!`;
}
console.log(greet()); // Hello, Guest!
5. Destructuring Assignment
Extract values from arrays or properties from objects into distinct variables.
javascript
Copy code
const [a, b] = [1, 2];
console.log(a, b); // 1 2

const { name, age } = { name: 'Alice', age: 25 };
console.log(name, age); // Alice 25
6. Spread and Rest Operators
Spread (...) expands an array or object, while rest (...) condenses multiple elements into one.
javascript
Copy code
// Spread
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5];
console.log(arr2); // [1, 2, 3, 4, 5]

// Rest
function sum(...numbers) {
  return numbers.reduce((acc, curr) => acc + curr, 0);
}
console.log(sum(1, 2, 3)); // 6
7. Classes
Syntactic sugar over JavaScript's prototype-based inheritance.
javascript
Copy code
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  greet() {
    console.log(`Hello, my name is ${this.name}`);
  }
}
const person = new Person('John', 30);
person.greet(); // Hello, my name is John
8. Modules
Import and export statements for modular code.
javascript
Copy code
// export.js
export const pi = 3.14;

// import.js
import { pi } from './export.js';
console.log(pi); // 3.14
9. Promises
For handling asynchronous operations.
javascript
Copy code
const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve('Success'), 1000);
});
promise.then((message) => console.log(message)); // Success
10. Iterators and Generators
Iterators: Protocols for defining iterable objects.
Generators: Functions that can be paused and resumed.
javascript
Copy code
function* generator() {
  yield 1;
  yield 2;
  yield 3;
}
const gen = generator();
console.log(gen.next().value); // 1
console.log(gen.next().value); // 2
console.log(gen.next().value); // 3
11. Map and Set
New collections for storing unique values and key-value pairs.
javascript
Copy code
// Set
const set = new Set([1, 2, 3, 4, 4]);
console.log(set); // Set { 1, 2, 3, 4 }

// Map
const map = new Map();
map.set('name', 'John');
console.log(map.get('name')); // John
12. Symbol
Unique and immutable data type used as an identifier for object properties.
javascript
Copy code
const sym = Symbol('description');
console.log(sym); // Symbol(description)
13. Enhanced Object Literals
Shorter syntax for object properties and methods.
javascript
Copy code
const name = 'Alice';
const person = {
  name,
  greet() {
    console.log(`Hello, ${this.name}`);
  },
};
person.greet(); // Hello, Alice
These ES6 features have significantly improved JavaScript's readability, maintainability, and functionality.
